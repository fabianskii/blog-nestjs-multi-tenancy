{"version":3,"sources":["../browser/src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import {Driver} from \"./Driver\";\nimport { hash } from \"../util/StringUtils\";\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as { [key: string]: any };\n\n            if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n\n    /**\n     * Builds column alias from given alias name and column name.\n     *\n     * If alias length is greater than the limit (if any) allowed by the current\n     * driver, replaces it with a hashed string.\n     *\n     * @param driver Current `Driver`.\n     * @param alias Alias part.\n     * @param column Name of the column to be concatened to `alias`.\n     *\n     * @return An alias allowing to select/transform the target `column`.\n     */\n    static buildColumnAlias({ maxAliasLength }: Driver, alias: string, column: string): string {\n        const columnAliasName = alias + \"_\" + column;\n\n        if (maxAliasLength && maxAliasLength > 0 && columnAliasName.length > maxAliasLength) {\n            return hash(columnAliasName, { length: maxAliasLength });\n        }\n\n        return columnAliasName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n}\n"],"sourceRoot":".."}