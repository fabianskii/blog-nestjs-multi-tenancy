{"version":3,"sources":["../../src/decorator/tree/Tree.ts"],"names":[],"mappings":";;AAAA,4BAA8C;AAI9C;;;;;GAKG;AACH,SAAgB,IAAI,CAAC,IAAc;IAC/B,OAAO,UAAU,MAAgB;QAE7B,0BAAsB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;YAChC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;SACO,CAAC,CAAC;IAC3B,CAAC,CAAC;AACN,CAAC;AARD,oBAQC","file":"Tree.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {TreeMetadataArgs} from \"../../metadata-args/TreeMetadataArgs\";\nimport {TreeType} from \"../../metadata/types/TreeTypes\";\n\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(type: TreeType): ClassDecorator {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type\n        } as TreeMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."}